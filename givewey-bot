import telebot
import pymysql
from flask import Flask, request
import logging
from datetime import datetime
import random
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import re

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '8183993638:AAEmRRaXUJQ1LoC3iUIpABmo4r0vz0CiMTg'
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = pymysql.connect(
    host='myzemex.mysql.tools',
    user='myzemex_givebot',
    password='65Ma-r7_yN',
    database='myzemex_givebot'
)

def get_db_cursor():
    # –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
    try:
        db.ping(reconnect=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ ping –∫ –ë–î: {e}")
        # –ú–æ–∂–Ω–æ —Ç—É—Ç –∑–∞–Ω–æ–≤–æ db = pymysql.connect(...) –≤—ã–∑–≤–∞—Ç—å
        # –Ω–æ –ª—É—á—à–µ –æ–¥–∏–Ω —Ä–∞–∑ –¥–µ—Ä–∂–∞—Ç—å db –≥–ª–æ–±–∞–ª—å–Ω–æ.
    return db.cursor()



def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2 —Å –¥–≤–æ–π–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–æ—á–∫–∏"""
    special_chars = r'_*[]()~`>#+-=|{}!'
    for char in special_chars:
        text = text.replace(char, f"\\{char}")
    # –î–≤–∞–∂–¥—ã —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏
    text = text.replace('.', '\\.')
    return text



# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–æ–≥–æ ID —Ç–µ–ª–µ–≥—Ä–∞–º
ALLOWED_USERS = [279721068]  # –ó–∞–º–µ–Ω–∏—Ç–µ 123456789 –Ω–∞ –≤–∞—à Telegram ID

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def authorized_only(func):
    def wrapper(message, *args, **kwargs):
        if message.from_user.id not in ALLOWED_USERS:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        return func(message, *args, **kwargs)
    return wrapper

# –°–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø
attached_channels = []
attached_groups = []

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
def load_subscriptions():
    global attached_channels, attached_groups
    try:
        with get_db_cursor() as cursor:
            cursor.execute("SELECT type, identifier, name FROM subscriptions")
            for sub_type, identifier, name in cursor.fetchall():
                if sub_type == 'channel':
                    attached_channels.append({'id': identifier, 'name': name})
                elif sub_type == 'group':
                    attached_groups.append({'id': identifier, 'name': name})
        logging.info("–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")


# Setting up a main menu with buttons
def setup_main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        KeyboardButton("/events"),
        KeyboardButton("/publish"),
        KeyboardButton("/create"),
        KeyboardButton("/draw"),
        KeyboardButton("/attach_channel"),
        KeyboardButton("/attach_group")
    )
    return markup



# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
edit_sessions = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
@bot.message_handler(commands=['edit'])
@authorized_only
def show_giveaways_for_editing(message):
    try:
        with get_db_cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
            cursor.execute("SELECT id, title FROM giveaways WHERE end_time > NOW()")
            giveaways = cursor.fetchall()

        if giveaways:
            markup = InlineKeyboardMarkup()
            for giveaway in giveaways:
                button = InlineKeyboardButton(
                    text=giveaway[1],  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
                    callback_data=f"edit_{giveaway[0]}"  # ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞
                )
                markup.add(button)

            bot.send_message(
                chat_id=message.chat.id,
                text="‚ú® *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*",
                parse_mode='Markdown',
                reply_markup=markup
            )
        else:
            bot.reply_to(message, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_'))
def start_edit_process(call):
    try:
        giveaway_id = int(call.data.split('_')[1])

        with get_db_cursor() as cursor:
            cursor.execute("SELECT id, title, description, winners_count, end_time FROM giveaways WHERE id = %s", (giveaway_id,))
            giveaway = cursor.fetchone()

        if giveaway:
            response_text = (f"*‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:*\n"
                             f"üèÜ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {giveaway[1]}\n"
                             f"‚ÑπÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {giveaway[2]}\n"
                             f"üéØ *–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* {giveaway[3]}\n"
                             f"üìÖ *–û–∫–æ–Ω—á–∞–Ω–∏–µ:* {giveaway[4].strftime('%d.%m.%Y %H:%M')}\n\n"
                             f"*–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:*")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ —Å–µ—Å—Å–∏–∏
            edit_sessions[call.message.chat.id] = {'giveaway_id': giveaway_id}

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add(KeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ"), KeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ"))
            markup.add(KeyboardButton("–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"), KeyboardButton("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"))

            bot.send_message(
                chat_id=call.message.chat.id,
                text=response_text,
                parse_mode='Markdown',
                reply_markup=markup
            )
        else:
            bot.answer_callback_query(call.id, "–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.chat.id in edit_sessions and 'field' not in edit_sessions[message.chat.id])
def handle_field_selection(message):
    try:
        field_map = {
            "–ù–∞–∑–≤–∞–Ω–∏–µ": "title",
            "–û–ø–∏—Å–∞–Ω–∏–µ": "description",
            "–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π": "winners_count",
            "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è": "end_time"
        }

        logging.info(f"[–í—ã–±–æ—Ä –ø–æ–ª—è] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}")
        
        selected_field = field_map.get(message.text.strip())  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        logging.info(f"[–í—ã–±–æ—Ä –ø–æ–ª—è] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–ª–µ: {message.text}, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–µ: {selected_field}")

        if selected_field:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—è
            if selected_field == "winners_count":
                bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ª—è '{message.text}':")
            elif selected_field == "end_time":
                bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 26.01.2025 12:15 –¥–ª—è –ø–æ–ª—è '{message.text}':")
            else:
                bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{message.text}':")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            edit_sessions[message.chat.id]['field'] = selected_field
            logging.info(f"[–í—ã–±–æ—Ä –ø–æ–ª—è] –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {edit_sessions[message.chat.id]}")
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
@bot.message_handler(func=lambda message: message.chat.id in edit_sessions and 'field' in edit_sessions[message.chat.id])
def save_field_edit(message):
    try:
        session_data = edit_sessions.pop(message.chat.id)
        giveaway_id = session_data['giveaway_id']
        field = session_data['field']
        new_value = message.text

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        if field == "winners_count":
            if not new_value.isdigit():
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ª—è '–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π'.")
                return
            new_value = int(new_value)
        elif field == "end_time":
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
                new_value = datetime.strptime(new_value, "%d.%m.%Y %H:%M")
            except ValueError:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ '26.01.2025 12:15'.")
                return

        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: –ø–æ–ª–µ={field}, –∑–Ω–∞—á–µ–Ω–∏–µ={new_value}, —Ä–æ–∑—ã–≥—Ä—ã—à_id={giveaway_id}")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        query = f"UPDATE giveaways SET {field} = %s WHERE id = %s"
        with get_db_cursor() as cursor:
            cursor.execute(query, (new_value, giveaway_id))
            db.commit()

        bot.send_message(message.chat.id, "üëå –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—è: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# END Edit
    

@bot.message_handler(commands=['draw'])
@authorized_only
def draw_giveaway(message):
    try:
        with get_db_cursor() as cursor:
            cursor.execute(
                "SELECT id, title, winners_count FROM giveaways "
                "WHERE winners IS NULL AND end_time <= NOW()"
            )
            giveaways = cursor.fetchall()

        if giveaways:
            markup = InlineKeyboardMarkup()
            for giveaway in giveaways:
                button = InlineKeyboardButton(
                    text=giveaway[1],  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
                    callback_data=f"draw_{giveaway[0]}"  # ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞
                )
                markup.add(button)

            bot.send_message(
                chat_id=message.chat.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:",
                reply_markup=markup
            )
        else:
            bot.reply_to(message, "–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('draw_'))
def handle_draw(call):
    try:
        giveaway_id = int(call.data.split('_')[1])
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å ID: {giveaway_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ —Å–µ—Å—Å–∏–∏
        edit_sessions[call.message.chat.id] = {'giveaway_id': giveaway_id}

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å, –≥–¥–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("üì¢ –í –∫–∞–Ω–∞–ª–µ", callback_data=f"finalize_channel_{giveaway_id}"),
            InlineKeyboardButton("üí¨ –í —á–∞—Ç–µ", callback_data=f"finalize_group_{giveaway_id}")

        )

        bot.send_message(
            call.message.chat.id,
            "–ì–¥–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞?",
            reply_markup=markup
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('finalize_')) # —Ç—É—Ç –∑–∞–º–µ–Ω–∏–ª –Ω–∞ finalize_ –∞ –±—ã–ª–æ publish_
def confirm_draw(call):
    try:
        data = call.data.split('_')
        place = data[1]  # channel –∏–ª–∏ group
        giveaway_id = int(data[2])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–µ—Å—Å–∏–∏
        edit_sessions[call.message.chat.id]['place'] = place

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_{giveaway_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        )

        bot.send_message(call.message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à?", reply_markup=markup)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_'))
def finalize_draw(call):
    try:
        giveaway_id = int(call.data.split('_')[1])
        session = edit_sessions.pop(call.message.chat.id, None)
        place = session['place']

        with get_db_cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            cursor.execute(
                "SELECT id, user_id, username FROM users WHERE giveaway_id = %s",
                (giveaway_id,)
            )
            participants = cursor.fetchall()

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç
            cursor.execute(
                "SELECT winners_count FROM giveaways WHERE id = %s",
                (giveaway_id,)
            )
            winners_count = cursor.fetchone()[0]

        if len(participants) < winners_count:
            bot.send_message(call.message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
            return

        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
        winners = random.sample(participants, winners_count)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        # –ü—Ä–∏–º–µ—Ä HTML: <b>–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b>
        response_text = "üéâ <b>–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b>\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±–∞–∑—ã
        winners_data = []
        for position, winner in enumerate(winners, start=1):
            # user_id = winner[1]  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ winners_data
            username = winner[2]  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            winners_data.append({"user_id": winner[1], "username": username, "place": position})

            # –í HTML-—Ä–∞–∑–º–µ—Ç–∫–µ @username –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
            response_text += f"{position} –º–µ—Å—Ç–æ: @{username}\n"

        response_text += "\n–í—Å–µ–º —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n"

        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
        with get_db_cursor() as cursor:
            cursor.execute("UPDATE giveaways SET winners = %s WHERE id = %s", (str(winners_data), giveaway_id))
            db.commit()

        logging.info(f"attached_channels: {attached_channels}")
        logging.info(f"attached_groups: {attached_groups}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if place == 'channel':
            logging.info("–ù–∞—á–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ.")
            with get_db_cursor() as cursor:
                cursor.execute("SELECT identifier FROM subscriptions WHERE type = 'channel'")
                channel = cursor.fetchone()

            if channel:
                try:
                    bot.send_message(
                        chat_id=int(channel[0]),
                        text=response_text,
                        parse_mode='HTML'  # HTML –≤–º–µ—Å—Ç–æ MarkdownV2
                    )
                    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª (ID: {channel[0]})")
                    bot.send_message(call.message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª (ID: {channel[0]}): {e}")
                    bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª.")
            else:
                bot.send_message(call.message.chat.id, "–ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        elif place == 'group':
            logging.info("–ù–∞—á–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –≥—Ä—É–ø–ø–µ.")
            with get_db_cursor() as cursor:
                cursor.execute("SELECT identifier FROM subscriptions WHERE type = 'group'")
                group = cursor.fetchone()

            if group:
                try:
                    bot.send_message(
                        chat_id=int(group[0]),
                        text=response_text,
                        parse_mode='HTML'  # HTML –≤–º–µ—Å—Ç–æ MarkdownV2
                    )
                    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É (ID: {group[0]})")
                    bot.send_message(call.message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø–ø–µ.")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É (ID: {group[0]}): {e}")
                    bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É.")
            else:
                bot.send_message(call.message.chat.id, "–ì—Ä—É–ø–ø–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        bot.answer_callback_query(call.id, "–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥—ë–Ω!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def cancel_draw(call):
    bot.answer_callback_query(call.id, "–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω—ë–Ω.")
    bot.send_message(call.message.chat.id, "–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω—ë–Ω –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@bot.message_handler(commands=['attach_channel'])
@authorized_only
def attach_channel(message):
    try:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /attach_channel: {message.text}")
        channel_id = message.text.split(maxsplit=1)[1]
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞–Ω–∞–ª: {channel_id}")

        chat_info = bot.get_chat(channel_id)
        channel_name = chat_info.username or chat_info.title

        if not any(channel['id'] == channel_id for channel in attached_channels):
            attached_channels.append({'id': channel_id, 'name': channel_name})
            with get_db_cursor() as cursor:
                cursor.execute("INSERT INTO subscriptions (type, identifier, name) VALUES ('channel', %s, %s)", (channel_id, channel_name))
                db.commit()
            bot.reply_to(message, f"–ö–∞–Ω–∞–ª {channel_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω!")
            logging.info(f"–ö–∞–Ω–∞–ª {channel_id} ({channel_name}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        else:
            bot.reply_to(message, "–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω.")
    except IndexError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
@bot.message_handler(commands=['attach_group'])
@authorized_only
def attach_group(message):
    try:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /attach_group: {message.text}")
        group_id = message.text.split(maxsplit=1)[1]
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≥—Ä—É–ø–ø—É: {group_id}")

        chat_info = bot.get_chat(group_id)
        group_name = chat_info.username or chat_info.title

        if not any(group['id'] == group_id for group in attached_groups):
            attached_groups.append({'id': group_id, 'name': group_name})
            with get_db_cursor() as cursor:
                cursor.execute("INSERT INTO subscriptions (type, identifier, name) VALUES ('group', %s, %s)", (group_id, group_name))
                db.commit()
            bot.reply_to(message, f"–ì—Ä—É–ø–ø–∞ {group_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞!")
            logging.info(f"–ì—Ä—É–ø–ø–∞ {group_id} ({group_name}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        else:
            bot.reply_to(message, "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞.")
    except IndexError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")


@bot.message_handler(commands=['check_subscriptions'])
@authorized_only
def check_subscriptions(message):
    response_text = "‚ú® <b>–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã:</b>\n"

    response_text += "\n<b>–ö–∞–Ω–∞–ª—ã:</b>\n"
    if attached_channels:
        channel_lines = []
        for channel in attached_channels:
            # –ù–∞–ø—Ä–∏–º–µ—Ä: "My_Channel (123456789)"
            channel_lines.append(f"{channel['name']} ({channel['id']})")
        response_text += "\n".join(channel_lines)
    else:
        response_text += "–ù–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."

    response_text += "\n\n<b>–ì—Ä—É–ø–ø—ã:</b>\n"
    if attached_groups:
        group_lines = []
        for group in attached_groups:
            # –ù–∞–ø—Ä–∏–º–µ—Ä: "My_Group (987654321)"
            group_lines.append(f"{group['name']} ({group['id']})")
        response_text += "\n".join(group_lines)
    else:
        response_text += "–ù–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø."

    # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å parse_mode='HTML'
    bot.send_message(message.chat.id, response_text, parse_mode='HTML')



# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_subscription(user_id):
    try:
        for channel in attached_channels:
            channel_status = bot.get_chat_member(channel['id'], user_id).status
            if channel_status not in ["member", "administrator", "creator"]:
                return False

        for group in attached_groups:
            group_status = bot.get_chat_member(group['id'], user_id).status
            if group_status not in ["member", "administrator", "creator"]:
                return False

        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /create ‚Äì –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
@bot.message_handler(commands=['create'])
@authorized_only
def create_giveaway(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:")
    bot.register_next_step_handler(message, get_title)

def get_title(message):
    title = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:")
    bot.register_next_step_handler(message, get_description, title)

def get_description(message, title):
    description = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (—á–∏—Å–ª–æ):")
    bot.register_next_step_handler(message, get_winners_count, title, description)

def get_winners_count(message, title, description):
    try:
        winners_count = int(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 26.01.2025 12:15")
        bot.register_next_step_handler(message, save_giveaway, title, description, winners_count)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, get_winners_count, title, description)

def save_giveaway(message, title, description, winners_count):
    try:
        end_time = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
        query = "INSERT INTO giveaways (title, description, winners_count, end_time) VALUES (%s, %s, %s, %s)"

        with get_db_cursor() as cursor:
            cursor.execute(query, (title, description, winners_count, end_time))
            db.commit()

        bot.send_message(message.chat.id, "üëå –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")


# /publish -----------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /publish ‚Äì –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
@bot.message_handler(commands=['publish'])
@authorized_only
def publish_giveaway(message):
    try:
        with get_db_cursor() as cursor:
            cursor.execute("SELECT id, title, description, winners_count, end_time FROM giveaways WHERE end_time > NOW()")
            giveaways = cursor.fetchall()

        if giveaways:
            markup = InlineKeyboardMarkup()
            for giveaway in giveaways:
                button = InlineKeyboardButton(
                    text=giveaway[1],  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
                    callback_data=f"publish_{giveaway[0]}"  # ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞
                )
                markup.add(button)

            bot.send_message(
                chat_id=message.chat.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=markup
            )
        else:
            bot.reply_to(message, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–≤—ã–±–æ—Ä —Ä–æ–∑—ã–≥—Ä—ã—à–∞)
@bot.callback_query_handler(func=lambda call: call.data.startswith('publish_'))
def handle_publish(call):
    try:
        data_parts = call.data.split('_')
        if len(data_parts) < 2:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        giveaway_id = int(data_parts[1])
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å ID: {giveaway_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ —Å–µ—Å—Å–∏–∏
        edit_sessions[call.message.chat.id] = {'giveaway_id': giveaway_id}

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", callback_data=f"channel_{giveaway_id}"),
            InlineKeyboardButton("üí¨ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —á–∞—Ç–µ", callback_data=f"group_{giveaway_id}")
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"/"–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        markup.add(
            InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="finish_publication")
        )

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à:", reply_markup=markup)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –æ—Ç–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: call.data == "finish_publication")
def finish_publication(call):
    # –ï—Å–ª–∏ —É –≤–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è edit_sessions ‚Äî –æ—á–∏—â–∞–µ–º, —á—Ç–æ–±—ã –±–æ—Ç
    # ¬´–∑–∞–±—ã–ª¬ª –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_sessions.pop(call.message.chat.id, None)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–æ—à–∫–æ
    bot.answer_callback_query(call.id, "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!")

    # –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    bot.send_message(call.message.chat.id, "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")


# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ (HTML-–≤–µ—Ä—Å–∏—è)
@bot.callback_query_handler(func=lambda call: call.data.startswith('channel_'))
def publish_to_channel(call):
    try:
        giveaway_id = int(call.data.split('_')[1])
        logging.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å ID: {giveaway_id} –≤ –∫–∞–Ω–∞–ª–µ")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
        with get_db_cursor() as cursor:
            cursor.execute(
                "SELECT title, description, winners_count, end_time "
                "FROM giveaways WHERE id = %s",
                (giveaway_id,)
            )
            giveaway = cursor.fetchone()

        if not giveaway:
            bot.answer_callback_query(call.id, "–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        title, description, winners_count, end_time = giveaway

        # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        with get_db_cursor() as cursor:
            cursor.execute(
                "SELECT COUNT(*) FROM users WHERE giveaway_id = %s",
                (giveaway_id,)
            )
            participants_count = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
        with get_db_cursor() as cursor:
            cursor.execute("SELECT identifier FROM subscriptions WHERE type = 'channel'")
            channel = cursor.fetchone()

        if channel is None:
            bot.answer_callback_query(call.id, "–ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML-—Ç–µ–∫—Å—Ç
        response_text = (
            f"‚ú® <b>–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à</b>\n\n"
            f"<b>{title}</b>\n\n"
            f"{description}\n\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{participants_count}</b>\n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: <b>{winners_count}</b>\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: <b>{end_time.strftime('%d.%m %H:%M')}</b> Kyiv\n\n"
            f"–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç.\n"
            f"<a href=\"https://t.me/joni4yarda\">Joni4yarda CRYPTO</a>\n"
            f"<a href=\"https://t.me/joni4yarda_chat\">–ß–∞—Ç Joni4yarda</a>"
        )

        # –ö–Ω–æ–ø–∫–∞ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join_{giveaway_id}"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (HTML)
        bot.send_message(
            chat_id=channel[0],
            text=response_text,
            parse_mode='HTML',
            reply_markup=markup,
            disable_web_page_preview=True
        )

        bot.answer_callback_query(call.id, "–†–æ–∑—ã–≥—Ä—ã—à –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —á–∞—Ç–µ (HTML-–≤–µ—Ä—Å–∏—è)
@bot.callback_query_handler(func=lambda call: call.data.startswith('group_'))
def publish_to_group(call):
    try:
        giveaway_id = int(call.data.split('_')[1])
        logging.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å ID: {giveaway_id} –≤ —á–∞—Ç–µ")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
        with get_db_cursor() as cursor:
            cursor.execute(
                "SELECT title, description, winners_count, end_time "
                "FROM giveaways WHERE id = %s",
                (giveaway_id,)
            )
            giveaway = cursor.fetchone()

        if not giveaway:
            bot.answer_callback_query(call.id, "–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        title, description, winners_count, end_time = giveaway

        # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        with get_db_cursor() as cursor:
            cursor.execute(
                "SELECT COUNT(*) FROM users WHERE giveaway_id = %s",
                (giveaway_id,)
            )
            participants_count = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
        with get_db_cursor() as cursor:
            cursor.execute("SELECT identifier FROM subscriptions WHERE type = 'group'")
            group = cursor.fetchone()

        if group is None:
            bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML-—Ç–µ–∫—Å—Ç
        response_text = (
            f"‚ú® <b>–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à</b>\n\n"
            f"<b>{title}</b>\n\n"
            f"{description}\n\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{participants_count}</b>\n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: <b>{winners_count}</b>\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: <b>{end_time.strftime('%d.%m %H:%M')}</b> Kyiv\n\n"
            f"–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ —á–∞—Ç –∏ –∫–∞–Ω–∞–ª.\n"
            f"<a href=\"https://t.me/joni4yarda\">Joni4yarda CRYPTO</a>\n"
            f"<a href=\"https://t.me/joni4yarda_chat\">–ß–∞—Ç Joni4yarda</a>"
        )

        # –ö–Ω–æ–ø–∫–∞ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join_{giveaway_id}"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É (HTML)
        bot.send_message(
            chat_id=group[0],
            text=response_text,
            parse_mode='HTML',
            reply_markup=markup,
            disable_web_page_preview=True
        )

        bot.answer_callback_query(call.id, "–†–æ–∑—ã–≥—Ä—ã—à –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —á–∞—Ç–µ!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —á–∞—Ç–µ: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# END –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞–Ω–æ–Ω—Å–∞


# /view –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–æ–Ω—Å–∞
@bot.message_handler(commands=['view'])
@authorized_only
def view_giveaway(message):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä "/view 1"
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü—Ä–∏–º–µ—Ä: /view 1")
            return

        giveaway_id_str = parts[1]
        giveaway_id = int(giveaway_id_str)

        # 1) –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ
        with get_db_cursor() as cursor:
            cursor.execute(
                "SELECT title, description, winners_count, end_time "
                "FROM giveaways WHERE id = %s",
                (giveaway_id,)
            )
            giveaway = cursor.fetchone()

        if not giveaway:
            bot.reply_to(message, "–†–æ–∑—ã–≥—Ä—ã—à —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        title, description, winners_count, end_time = giveaway

        # 2) –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        with get_db_cursor() as cursor:
            cursor.execute(
                "SELECT COUNT(*) FROM users WHERE giveaway_id = %s",
                (giveaway_id,)
            )
            participants_count = cursor.fetchone()[0]  # –í–µ—Ä–Ω—ë—Ç –∫–æ—Ä—Ç–µ–∂ (—á–∏—Å–ª–æ,)

        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML-—Ç–µ–∫—Å—Ç –∞–Ω–æ–Ω—Å–∞
        response_text = (
            f"‚ú® <b>–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à</b>\n\n"
            f"<b>{title}</b>\n\n"
            f"{description}\n\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{participants_count}</b>\n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: <b>{winners_count}</b>\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: <b>{end_time.strftime('%d.%m %H:%M')}</b> Kyiv\n\n"
            f"–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç.\n"
            f"<a href=\"https://t.me/joni4yarda\">Joni4yarda CRYPTO</a>\n"
            f"<a href=\"https://t.me/joni4yarda_chat\">–ß–∞—Ç Joni4yarda</a>"
        )

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join_{giveaway_id}"))

        bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            parse_mode='HTML',
            reply_markup=markup,
            disable_web_page_preview=True
        )

    except ValueError:
        bot.reply_to(message, "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü—Ä–∏–º–µ—Ä: /view 1")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –∫—ñ–Ω–µ—Ü—å /view



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith('join_'))
def handle_join(call):
    try:
        user_id = call.from_user.id
        username = call.from_user.username  # <-- –°–æ—Ö—Ä–∞–Ω—è–µ–º username
        giveaway_id = int(call.data.split('_')[1])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å username
        if not username:  # None –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            bot.answer_callback_query(
                call.id,
                "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –ø—Ä–æ—Ñ–∏–ª–µ Telegram, –ø—Ä–µ–∂–¥–µ —á–µ–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.",
                show_alert=True
            )
            return

        if not check_subscription(user_id):
            bot.answer_callback_query(
                call.id, 
                "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.", 
                show_alert=True
            )
            return

        with get_db_cursor() as cursor:
            cursor.execute("SELECT id FROM users WHERE giveaway_id = %s AND user_id = %s", (giveaway_id, user_id))
            if cursor.fetchone():
                bot.answer_callback_query(
                    call.id,
                    "‚úÖ –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ!",
                    show_alert=True
                    )
                return

            cursor.execute(
                "INSERT INTO users (giveaway_id, user_id, username) VALUES (%s, %s, %s)",
                (giveaway_id, user_id, username)
            )
            db.commit()

        bot.answer_callback_query(
            call.id,
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!",
            show_alert=True
        )
        return

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ: {e}")
        # bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.answer_callback_query(
            call.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ...",
            show_alert=True
        )



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /events –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
@bot.message_handler(commands=['events'])
@authorized_only
def show_all_giveaways(message):
    try:
        with get_db_cursor() as cursor:
            cursor.execute("SELECT id, title, description, winners_count, end_time FROM giveaways ORDER BY end_time DESC")
            giveaways = cursor.fetchall()

        if giveaways:
            response_text = "‚ú® *–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:*\n\n"
            for giveaway in giveaways:
                # giveaway[0] ‚Äî id, giveaway[1] ‚Äî title, giveaway[2] ‚Äî description,
                # giveaway[3] ‚Äî winners_count, giveaway[4] ‚Äî end_time
                response_text += (
                    f"*ID:* {giveaway[0]}\n"
                    f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {giveaway[1]}\n\n"
                    f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {giveaway[2]}\n\n"
                    f"*–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* {giveaway[3]}\n"
                    f"*–û–∫–æ–Ω—á–∞–Ω–∏–µ:* {giveaway[4].strftime('%d.%m.%Y %H:%M')}\n"
                    "-----------\n\n"
                )
        else:
            response_text = "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π."

        bot.send_message(message.chat.id, response_text, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# -------------------------------


# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
# –ö–æ–º–∞–Ω–¥–∞ /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
@bot.message_handler(commands=['delete'])
@authorized_only
def delete_giveaway(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ), 
        # –ª–∏–±–æ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ ‚Äî –≤—ã–±–∏—Ä–∞–π—Ç–µ —Å–∞–º–∏ –ª–æ–≥–∏–∫—É
        with get_db_cursor() as cursor:
            cursor.execute("SELECT id, title FROM giveaways ORDER BY end_time DESC")
            giveaways = cursor.fetchall()

        if not giveaways:
            bot.reply_to(message, "–ù–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = InlineKeyboardMarkup()
        for giveaway in giveaways:
            giveaway_id = giveaway[0]
            title = giveaway[1]
            markup.add(
                InlineKeyboardButton(
                    text=title,
                    callback_data=f"delete_{giveaway_id}"
                )
            )

        bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
            reply_markup=markup
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def confirm_delete(call):
    try:
        data_parts = call.data.split('_')
        if len(data_parts) < 2:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        giveaway_id = int(data_parts[1])

        # –î–æ—Å—Ç–∞—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ
        with get_db_cursor() as cursor:
            cursor.execute("SELECT title FROM giveaways WHERE id = %s", (giveaway_id,))
            giveaway = cursor.fetchone()

        if not giveaway:
            bot.answer_callback_query(call.id, "–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        title = giveaway[0]

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        markup = InlineKeyboardMarkup()
        # –ö–Ω–æ–ø–∫–∞ –¥–∞ -> callback_data "deleteconfirm_{id}"
        # –ö–Ω–æ–ø–∫–∞ –Ω–µ—Ç -> callback_data "deletecancel"
        markup.add(
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"deleteconfirm_{giveaway_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="deletecancel")
        )

        bot.send_message(
            chat_id=call.message.chat.id,
            text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à: <b>{title}</b>?",
            parse_mode="HTML",
            reply_markup=markup
        )

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º alert
        bot.answer_callback_query(call.id)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('deleteconfirm_'))
def finalize_delete(call):
    try:
        data_parts = call.data.split('_')
        if len(data_parts) < 2:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        giveaway_id = int(data_parts[1])

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'users' (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—â–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ–∂–µ)
        with get_db_cursor() as cursor:
            cursor.execute("DELETE FROM users WHERE giveaway_id = %s", (giveaway_id,))
            db.commit()

        # –£–¥–∞–ª—è–µ–º —Å–∞–º —Ä–æ–∑—ã–≥—Ä—ã—à
        with get_db_cursor() as cursor:
            cursor.execute("DELETE FROM giveaways WHERE id = %s", (giveaway_id,))
            db.commit()

        bot.send_message(
            chat_id=call.message.chat.id,
            text="–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω."
        )
        bot.answer_callback_query(call.id, "–†–æ–∑—ã–≥—Ä—ã—à —É–¥–∞–ª—ë–Ω")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data == 'deletecancel')
def cancel_delete(call):
    bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    bot.send_message(call.message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


# –ö–æ–Ω–µ—Ü —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞



# –í–µ–±—Ö—É–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@app.route('/webhook', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return 'OK', 200


if __name__ == '__main__':
    load_subscriptions()
    bot.remove_webhook()
    bot.set_webhook(url='https://giveaways.fishub.net/webhook')
    app.run(host='127.1.4.66', port=3000)

